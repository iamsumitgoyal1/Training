
 Rails/Practice/E-book_proj/app/controllers/api/v1/users_controller.rb

module Api
	module V1
	  class UsersController < ApplicationController
        def index
          @users = User.order('id');
          render json: {status: "SUCCESS", message: "Loaded Users", data: @users},status: :ok
        end

        def show
         @user=User.find(params[:id])
         render json: {status: "SUCCESS", message: "Loaded Users", data: @user},status: :ok
        end

        def create
         @user=User.new(user_params)

         if @user.save
            render json: {status: "SUCCESS", message: "Saved User", data: @user},status: :ok
         else
        	render json: {status: "Error", message: "User not saved", data: @user.errors},status: :unprocessable_entity
         end

        end
        
        def update
         @user=User.find(params[:id])
          if @user.update(user_params)
           render json: {status: "SUCCESS", message: "Update User", data: @user},status: :ok
          else
           render json: {status: "Error", message: "User not updated", data: @user},status: :unprocessable_entity
          end
        end

        def destroy
          @user = User.find(params[:id])
          @user.destroy
          render json: {status: "SUCCESS", message: "Deleted User", data: @user},status: :ok
        end


        private
        
        def user_params
        params.require(:user).permit(:name,:contact,:email,:password,:confirm_password)
        end
  

      end
    end
end



Read:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Get http://localhost:3000/api/v1/users


Api Output:

{
    "status": "SUCCESS",
    "message": "Loaded Users",
    "data": [
        {
            "id": 1,
            "name": "sumit",
            "email": "s@gmail.com",
            "contact": "21",
            "password": "1",
            "confirm_password": "1",
            "created_at": "2020-03-02T10:40:57.296Z",
            "updated_at": "2020-03-02T10:40:57.296Z"
        },
        {
            "id": 9,
            "name": "Sourabh",
            "email": "sor@gmail.com",
            "contact": "1234567823",
            "password": "ss123456",
            "confirm_password": "ss123456",
            "created_at": "2020-03-05T05:21:01.688Z",
            "updated_at": "2020-03-05T05:21:01.688Z"
        },
        {
            "id": 10,
            "name": "Shakti",
            "email": "shk@gmail.com",
            "contact": "76782111217",
            "password": "Ss234",
            "confirm_password": "Ss234",
            "created_at": "2020-03-05T05:21:46.874Z",
            "updated_at": "2020-03-05T05:21:46.874Z"
        }
    ]
}


Create:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
post http://localhost:3000/api/v1/users

Row json in body in tool postman:

{
            
            "name": "Amit",
            "email": "a@gmail.com",
            "contact": "96786r53421",
            "password": "123",
            "confirm_password": "123"
         
        }


output:

{
    "status": "SUCCESS",
    "message": "Saved User",
    "data": {
        "id": 12,
        "name": "Amit",
        "email": "a@gmail.com",
        "contact": "96786r53421",
        "password": "123",
        "confirm_password": "123",
        "created_at": "2020-03-11T10:32:09.147Z",
        "updated_at": "2020-03-11T10:32:09.147Z"
    }
}

delete:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Delete http://localhost:3000/api/v1/users/12

{
    "status": "SUCCESS",
    "message": "Deleted User",
    "data": {
        "id": 12,
        "name": "Amit",
        "email": "a@gmail.com",
        "contact": "96786r53421",
        "password": "123",
        "confirm_password": "123",
        "created_at": "2020-03-11T10:32:09.147Z",
        "updated_at": "2020-03-11T10:32:09.147Z"
    }
}

Update:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PATCH http://localhost:3000/api/v1/users/1

Request:

  {
            "id": 1,
            "name": "sumit",
            "email": "s@gmail.com",
            "contact": "2112345678",
            "password": "12345",
            "confirm_password": "12345"
         
        }

Response:

{
    "status": "SUCCESS",
    "message": "Update User",
    "data": {
        "id": 1,
        "name": "sumit",
        "contact": "2112345678",
        "email": "s@gmail.com",
        "password": "12345",
        "confirm_password": "12345",
        "created_at": "2020-03-02T10:40:57.296Z",
        "updated_at": "2020-03-11T10:48:09.549Z"
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>>>Created custom methods to show specific data with associated results

class ReviewSerializer < ActiveModel::Serializer
  attributes :id, :rating, :book, :user

  # belongs_to :user
  # belongs_to :book

  def book
   object.book.title
  end

  def user
   object.user.name
  end

end


[
    {
        "id": 1,
        "rating": "4.8",
        "book": "The Red Thread",
        "user": "Robert Pattinson"
    },
    {
        "id": 3,
        "rating": "5.0",
        "book": "Harry Potter(1-4)",
        "user": "Robert Pattinson"
    },
    {
        "id": 4,
        "rating": "4.5",
        "book": "Dark Moon",
        "user": "Sumit Goyal"
    },
    {
        "id": 5,
        "rating": "4.5",
        "book": "Harry Potter(1-4)",
        "user": "Denial Redcliffe"
    },
    {
        "id": 6,
        "rating": "4.5",
        "book": "The Red Thread",
        "user": "Denial Redcliffe"
    },
    {
        "id": 7,
        "rating": "4.5",
        "book": "Harry Potter(5-8)",
        "user": "Denial Redcliffe"
    },
    {
        "id": 15,
        "rating": "5.0",
        "book": "Game Of Thrones",
        "user": "Robert Pattinson"
    },
    {
        "id": 16,
        "rating": "4.0",
        "book": "Dark Moon",
        "user": "Denial Redcliffe"
    }
]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> JWT : Token Authentication >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2.7.0 :002 > JWT
 => JWT 

2.7.0 :005 > Rails.application.secrets.secret_key_base
 => "7a71e3bafebae53e0ca28f7f40b585b56eb5c1c7cf4b670b5d29fcca38647683ce249092765e5fc037b33e2ac1f2bebf13838163bb9bc7b0623a6c83bd2872d1" 


2.7.0 :013 > data = { user_id: 1}
2.7.0 :014 > secret = "sumit"
2.7.0 :015 > JWT.encode data, secret, 'HS256'
 => "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.0rQgBQ_-jlv18u9RNdE_5nbbseeruexzmuPPOPLxW-s" 

2.7.0 :016 > JWT.encode data, Rails.application.secrets.secret_key_base, 'HS256'
 => "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.QtqkAUPA4epSCwHZ9ia7p6a1scojUyuh-MsNNrRCHqw" 


Used jwt.io website to decode data, detect algo and verify signature


