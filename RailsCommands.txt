->Create a new project and connect with specified db:

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop$ rails new OLMS -d postgresql

->Create Database specified in config/database.yml

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rake db:create

->Create tables:
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g model book
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g model user

->Make and update changes to the schema

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rake db:migrate

->Add Column
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration add_category_to_books category:string

  add_column :users, :name, :string 

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration AddContactToUsers

->Remove column
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration remove_contact_to_users

   remove_column :books, :cat, :string

->Change Datatype
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration change_datatype_for_name

           change_column :reviews, :ratings, :string

->Drop table
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rails g migration drop_users
      
          drop_table :users
->Rename column

  rename_column :books, :author, :writer

->Add foreign key constraint
  
add_reference :purchases, :u_users, foreign_key: true

->Revert the last changes

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:redo

-> rake db migrate:down,up,rollback
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:up VERSION=20200204100436
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:status
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:rollback STEP=4
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:down VERSION=20200204100436

->limit,default,precision,scale,index

    add_column :reviews,:price,:decimal,  precision: 4, scale: 2
    add_column :reviews,:review,:text, default: "No notes recorded"
    add_column :reviews, :name,:string, limit: 30, null: false
    add_index :reviews, :name, unique: true
    remove_index :reviews, :name

->require_relative,revert,primary_key migrations:

require_relative '20200206092127_create_per_books.rb'
class AddNewRevertOld < ActiveRecord::Migration[6.0]
  def change
     revert CreatePerBooks
    create_table :bbooks, id: false do |t|
      t.string :name, primary_key: true
      t.decimal :price
    end
  end
end

->up,down,rollback,error

 class CreateAuthors < ActiveRecord::Migration[6.0]
  def up
   create_table :authors do |t|
     t.string :first_name
     t.string :last_name

     t.timestamps
   end
 end
->remove primary key column
  def change
    remove_column :purchase_books,:id, primary_key: false
  end

 def down
   raise ActiveRecord::IrreversibleMigration
 end
end
->check constraints

  execute "ALTER TABLE books ADD CONSTRAINT c CHECK (price1 IN (100, 200, 300) )"

"c" CHECK (price1 = ANY (ARRAY[100, 200, 300]))

->Insert data into tables:

def self.up
    Book.create(title: 'R',writer: 'a' ,published_date: '2020-02-02',category: 'H' ,price: 200 ,price1: 100)
  end


OLMS=# select * from books;
 id | title | writer | published_date |        created_at         |        updated_at         | category | price | price1 
----+-------+--------+----------------+---------------------------+---------------------------+----------+-------+--------
  2 | R     | a      | 2020-02-02     | 2020-02-07 05:41:19.82618 | 2020-02-07 05:41:19.82618 | H        |   200 |    100
(1 row)

save in seeds.rb
Book.create(title: 'RA',writer: 'ac' ,published_date: '2020-02-02',category: 'H' ,price: 200 ,price1: 100)
rake db:seed


->insert,Update,delete record of table:

2.7.0 :002 > Book.create(title: 'Game of frowns',writer: 'Robert Pattinson' ,published_date: '2020-12-02',category: 'funny' ,price: 500 ,price1: 100)

2.7.0 :003 > ap Book.all



2.7.0 :017 > p=Book.first
2.7.0 :020 > p.update(title: 'Blue Sky')

  Book Update (0.3ms)  UPDATE "books" SET "title" = $1, "updated_at" = $2 WHERE 

"books"."id" = $3  [["title", "Blue Sky"], ["updated_at", "2020-02-07 10:00:24.178324"], ["id", 1]]
   
2.7.0 :022 > p.delete
  

2.7.0 :023 > Book.first
  
 
2.7.0 :024 > Book.count
   (1.0ms)  SELECT COUNT(*) FROM "books"
 => 3 


2.7.0 :007 > helper.number_to_percentage(22, precision:2)
 => "22.00%" 

2.7.0 :025 > b=Book.new
2.7.0 :026 > b.title="Red Blood"
2.7.0 :027 > b.save

2.7.0 :030 > Book.find(2)
2.7.0 :034 > b.delete



class Book < ApplicationRecord
  scope :search, -> { where ("price < 300") }
  scope :with_long_title, -> { where("LENGTH(title) > 20") }
end

2.7.0 :001 > Book.search

->Associations

class Book < ApplicationRecord
    belongs_to :writer
    scope :search, -> { where ("price < 300") }
end

class Writer < ApplicationRecord
     has_many :books
end
2.7.0 :012 > Writer.book



Associations:

class Book < ApplicationRecord
  has_many :reviews
end

class Review < ApplicationRecord
  belongs_to :book
end

2.7.0 :065 > ap Book.first.reviews

    [0] #<Review:0x00007fa8080d1080> {
                :id => 1,
            :rating => 4.6,
        :created_at => Mon, 10 Feb 2020 10:12:19 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:21:41 UTC +00:00,

Database modifications For Associations:

class AddForeignKeyReferenceToPb < ActiveRecord::Migration[6.0]
  def change
    add_reference :purchase_books, :purchase, index: true, foreign_key: true
    add_reference :purchase_books, :book, index: true, foreign_key: true
    add_reference :purchase_books, :user, index: true, foreign_key: true
  end
end

           :user_id => 1,
           :book_id => 1
    }



class Book < ApplicationRecord
  has_many :reviews
  has_many :purchase_books
  has_many :users, through: :purchase_books
end

class User < ApplicationRecord
    has_many :reviews
    has_many :purchases
    has_many :purchase_books
    has_many :books, through: :purchase_books
end




2.7.0 :005 > Book.first.users
  Book Load (0.4ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 1]]
  User Load (0.4ms)  SELECT "users".* FROM "users" INNER JOIN "purchase_books" ON "users"."id" = "purchase_books"."user_id" WHERE "purchase_books"."book_id" = $1 LIMIT $2  [["book_id", 1], ["LIMIT", 11]]
 => #<ActiveRecord::Associations::CollectionProxy [#<User id: 1, name: "Robert Pattinson", contact: "9899198003", email: "rob@gmail.com", created_at: "2020-02-10 09:19:15", updated_at: "2020-02-10 09:19:15">]> 
2.7.0 :001 > User.first.books

#Associations between users,books,purchase,reviews is established
