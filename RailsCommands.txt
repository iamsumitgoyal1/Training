->Create a new project and connect with specified db:

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop$ rails new OLMS -d postgresql

->Create Database specified in config/database.yml

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rake db:create

->Create tables:
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g model book
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g model user

->Make and update changes to the schema

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rake db:migrate

->Add Column
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration add_category_to_books category:string

  add_column :users, :name, :string 

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration AddContactToUsers

->Remove column
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration remove_contact_to_users

   remove_column :books, :cat, :string

->Change Datatype
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/OLMS$ rails g migration change_datatype_for_name

           change_column :reviews, :ratings, :string

->Drop table
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rails g migration drop_users
      
          drop_table :users
->Rename column

  rename_column :books, :author, :writer

->Add foreign key constraint
  
add_reference :purchases, :u_users, foreign_key: true

->Revert the last changes

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:redo

-> rake db migrate:down,up,rollback
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:up VERSION=20200204100436
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:status
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:rollback STEP=4
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop/Training/OLMS$ rake db:migrate:down VERSION=20200204100436

->limit,default,precision,scale,index

    add_column :reviews,:price,:decimal,  precision: 4, scale: 2
    add_column :reviews,:review,:text, default: "No notes recorded"
    add_column :reviews, :name,:string, limit: 30, null: false
    add_index :reviews, :name, unique: true
    remove_index :reviews, :name

->require_relative,revert,primary_key migrations:

require_relative '20200206092127_create_per_books.rb'
class AddNewRevertOld < ActiveRecord::Migration[6.0]
  def change
     revert CreatePerBooks
    create_table :bbooks, id: false do |t|
      t.string :name, primary_key: true
      t.decimal :price
    end
  end
end

->up,down,rollback,error

 class CreateAuthors < ActiveRecord::Migration[6.0]
  def up
   create_table :authors do |t|
     t.string :first_name
     t.string :last_name

     t.timestamps
   end
 end
->remove primary key column
  def change
    remove_column :purchase_books,:id, primary_key: false
  end

 def down
   raise ActiveRecord::IrreversibleMigration
 end
end
->check constraints

  execute "ALTER TABLE books ADD CONSTRAINT c CHECK (price1 IN (100, 200, 300) )"

"c" CHECK (price1 = ANY (ARRAY[100, 200, 300]))

->Insert data into tables:

def self.up
    Book.create(title: 'R',writer: 'a' ,published_date: '2020-02-02',category: 'H' ,price: 200 ,price1: 100)
  end


OLMS=# select * from books;
 id | title | writer | published_date |        created_at         |        updated_at         | category | price | price1 
----+-------+--------+----------------+---------------------------+---------------------------+----------+-------+--------
  2 | R     | a      | 2020-02-02     | 2020-02-07 05:41:19.82618 | 2020-02-07 05:41:19.82618 | H        |   200 |    100
(1 row)

save in seeds.rb
Book.create(title: 'RA',writer: 'ac' ,published_date: '2020-02-02',category: 'H' ,price: 200 ,price1: 100)
rake db:seed


->insert,Update,delete record of table:

2.7.0 :002 > Book.create(title: 'Game of frowns',writer: 'Robert Pattinson' ,published_date: '2020-12-02',category: 'funny' ,price: 500 ,price1: 100)

2.7.0 :003 > ap Book.all



2.7.0 :017 > p=Book.first
2.7.0 :020 > p.update(title: 'Blue Sky')

  Book Update (0.3ms)  UPDATE "books" SET "title" = $1, "updated_at" = $2 WHERE 

"books"."id" = $3  [["title", "Blue Sky"], ["updated_at", "2020-02-07 10:00:24.178324"], ["id", 1]]
   
2.7.0 :022 > p.delete
  

2.7.0 :023 > Book.first
  
 
2.7.0 :024 > Book.count
   (1.0ms)  SELECT COUNT(*) FROM "books"
 => 3 


2.7.0 :007 > helper.number_to_percentage(22, precision:2)
 => "22.00%" 

2.7.0 :025 > b=Book.new
2.7.0 :026 > b.title="Red Blood"
2.7.0 :027 > b.save

2.7.0 :030 > Book.find(2)
2.7.0 :034 > b.delete



class Book < ApplicationRecord
  scope :search, -> { where ("price < 300") }
  scope :with_long_title, -> { where("LENGTH(title) > 20") }
end

2.7.0 :001 > Book.search

->Associations

class Book < ApplicationRecord
    belongs_to :writer
    scope :search, -> { where ("price < 300") }
end

class Writer < ApplicationRecord
     has_many :books
end
2.7.0 :012 > Writer.book



Associations:

class Book < ApplicationRecord
  has_many :reviews
end

class Review < ApplicationRecord
  belongs_to :book
end

2.7.0 :065 > ap Book.first.reviews

    [0] #<Review:0x00007fa8080d1080> {
                :id => 1,
            :rating => 4.6,
        :created_at => Mon, 10 Feb 2020 10:12:19 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:21:41 UTC +00:00,

Database modifications For Associations:

class AddForeignKeyReferenceToPb < ActiveRecord::Migration[6.0]
  def change
    add_reference :purchase_books, :purchase, index: true, foreign_key: true
    add_reference :purchase_books, :book, index: true, foreign_key: true
    add_reference :purchase_books, :user, index: true, foreign_key: true
  end
end

           :user_id => 1,
           :book_id => 1
    }



class Book < ApplicationRecord
  has_many :reviews
  has_many :purchase_books
  has_many :users, through: :purchase_books
end

class User < ApplicationRecord
    has_many :reviews
    has_many :purchases
    has_many :purchase_books
    has_many :books, through: :purchase_books
end




2.7.0 :005 > Book.first.users
  Book Load (0.4ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 1]]
  User Load (0.4ms)  SELECT "users".* FROM "users" INNER JOIN "purchase_books" ON "users"."id" = "purchase_books"."user_id" WHERE "purchase_books"."book_id" = $1 LIMIT $2  [["book_id", 1], ["LIMIT", 11]]
 => #<ActiveRecord::Associations::CollectionProxy [#<User id: 1, name: "Robert Pattinson", contact: "9899198003", email: "rob@gmail.com", created_at: "2020-02-10 09:19:15", updated_at: "2020-02-10 09:19:15">]> 
2.7.0 :001 > User.first.books

#Associations between users,books,purchase,reviews is established



#Queries

->2.7.0 :002 > ap Book.first.users

                :id => 1,
              :name => "Robert Pattinson",
           :contact => "9899198003",
             :email => "rob@gmail.com",
        :created_at => Mon, 10 Feb 2020 09:19:15 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 09:19:15 UTC +00:00

->2.7.0 :003 > ap User.first.books

    [0] #<Book:0x00005599ce903a40> {
                 :title => "The Red Thread",
                :author => "Ann Hood",
        :published_date => Thu, 22 Feb 2018,
              :category => "Romance",
                  :isbn => "123456x",
                 :price => 300.0,
            :created_at => Mon, 10 Feb 2020 06:11:10 UTC +00:00,
            :updated_at => Mon, 10 Feb 2020 06:11:10 UTC +00:00
    },
    [1] #<Book:0x00005599ce903950> {
                    :id => 2,
                 :title => "Harry Potter(1-4)",
                :author => "J.K Rowling",
        :published_date => Fri, 22 Feb 2019,
              :category => "Fantasy",
                  :isbn => "123456y",
                 :price => 1000.0,
            :created_at => Mon, 10 Feb 2020 06:13:54 UTC +00:00,
            :updated_at => Mon, 10 Feb 2020 06:13:54 UTC +00:00

->2.7.0 :004 > ap User.first.purchases

                :id => 1,
              :date => Wed, 01 Jan 2020,
           :ammount => 1300.0,
        :created_at => Mon, 10 Feb 2020 10:36:45 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:37:43 UTC +00:00,
           :user_id => 1
->2.7.0 :005 > ap User.first.purchase_books

    [0] #<PurchaseBook:0x00005599cdd8f740> {
         :created_at => Mon, 10 Feb 2020 12:10:02 UTC +00:00,
         :updated_at => Mon, 10 Feb 2020 12:10:02 UTC +00:00,
        :purchase_id => 1,
            :book_id => 1,
            :user_id => 1
    },
    [1] #<PurchaseBook:0x00005599cdb90f20> {
         :created_at => Mon, 10 Feb 2020 12:10:11 UTC +00:00,
         :updated_at => Mon, 10 Feb 2020 12:10:11 UTC +00:00,
        :purchase_id => 1,
            :book_id => 2,
            :user_id => 1
->2.7.0 :009 > ap Book.first.reviews

                :id => 1,
            :rating => 4.6,
        :created_at => Mon, 10 Feb 2020 10:12:19 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:21:41 UTC +00:00,
           :user_id => 1,
           :book_id => 1
->2.7.0 :008 > ap User.first.reviews

    [0] #<Review:0x00005599ce7d4f98> {
                :id => 1,
            :rating => 4.6,
        :created_at => Mon, 10 Feb 2020 10:12:19 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:21:41 UTC +00:00,
           :user_id => 1,
           :book_id => 1
->Create,update,Delete Records in database

2.7.0 :013 > x=Book.find_by(id: 6)
  Book Load (0.4ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 6], ["LIMIT", 1]]
2.7.0 :014 > x.published_date= "2018-04-22"
2.7.0 :015 > x.isbn= "111455y"
2.7.0 :016 > x.price= 1000
2.7.0 :017 > x.category="Adventure"
2.7.0 :018 > x.save

2.7.0 :009 > Book.find(10).delete

#Inserted More data into tables.
#Practising Queries on relationships:

2.7.0 :101 > ap PurchaseBook.order("purchase_id")
2.7.0 :100 > ap PurchaseBook.order("purchase_id").last
2.7.0 :096 > ap Book.last
2.7.0 :093 > ap Book.find(3)
2.7.0 :103 > ap PurchaseBook.order("purchase_id").take(2)
2.7.0 :104 > ap PurchaseBook.find_by(purchase_id: 3)
2.7.0 :112 > ap PurchaseBook.where(user_id: 1)
2.7.0 :118 > Book.limit(2).offset(3)
2.7.0 :126 > ap Book.second.users
2.7.0 :125 > ap User.first.books

2.7.0 :004 >  Book.where(author: 'J.K Rowling').second_to_last
2.7.0 :009 > ap  Book.where(author: 'J.K Rowling').all
2.7.0 :024 > ap Book.limit(3)
2.7.0 :028 > ap Book.select(:author).distinct

    [0] #<Book:0x000055fe940386d8> {
            "id" => nil,
        "author" => "Ekta Kapoor"
    },
    [1] #<Book:0x000055fe94038610> {
            "id" => nil,
        "author" => "George Martin"
    },
    [2] #<Book:0x000055fe94038548> {
            "id" => nil,
        "author" => "J.K Rowling"
    },
    [3] #<Book:0x000055fe94038480> {
            "id" => nil,
        "author" => "Robert Kiyonski"
    },
    [4] #<Book:0x000055fe940383b8> {
            "id" => nil,
        "author" => "Ann Hood"

2.7.0 :031 > ap Book.group(:author).sum(:price)

        "Ekta Kapoor" => 500.0,
      "George Martin" => 1000.0,
        "J.K Rowling" => 2500.0,
    "Robert Kiyonski" => 300.0,
           "Ann Hood" => 300.0

2.7.0 :035 > ap Book.select("sum(price),author").group(:author)

[
    [0] #<Book:0x000055fe93b65c50> {
            "id" => nil,
        "author" => "Ekta Kapoor",
           "sum" => 500.0
    },
    [1] #<Book:0x000055fe93b65b88> {
            "id" => nil,
        "author" => "George Martin",
           "sum" => 1000.0
    },
    [2] #<Book:0x000055fe93b65ac0> {
            "id" => nil,
        "author" => "J.K Rowling",
           "sum" => 2500.0
    },
    [3] #<Book:0x000055fe93b659f8> {
            "id" => nil,
        "author" => "Robert Kiyonski",
           "sum" => 300.0
    },
    [4] #<Book:0x000055fe93b65930> {
            "id" => nil,
        "author" => "Ann Hood",
           "sum" => 300.0
    }
]


2.7.0 :036 > ap Book.group("author").count

2.7.0 :039 > ap Book.select(:author).group("author").having("count(author) > 1")
[
    [0] #<Book:0x000055fe93a9a140> {
            "id" => nil,
        "author" => "J.K Rowling"
    }
]

2.7.0 :041 > ap Book.select(:author).group("author").having("count(author) > 1").unscope(:having)
[
    [0] #<Book:0x000055fe91dbfbd8> {
            "id" => nil,
        "author" => "Ekta Kapoor"
    },
    [1] #<Book:0x000055fe91dbfa48> {
            "id" => nil,
        "author" => "George Martin"
    },
    [2] #<Book:0x000055fe91dbf980> {
            "id" => nil,
        "author" => "J.K Rowling"
    },
    [3] #<Book:0x000055fe91dbf778> {
            "id" => nil,
        "author" => "Robert Kiyonski"
    },
    [4] #<Book:0x000055fe91dbf368> {
            "id" => nil,
        "author" => "Ann Hood"
    }
]

2.7.0 :042 >  Book.select(:author).reselect(:title)
  Book Load (0.3ms)  SELECT "books"."title" FROM "books" LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Book id: nil, title: "The Red Thread">, #<Book id: nil, title: "Harry Potter(1-4)">, #<Book id: nil, title: "Rich Dad Poor Dad">, #<Book id: nil, title: "Dark Moon">, #<Book id: nil, title: "Kasauti">, #<Book id: nil, title: "Game Of Thrones">, #<Book id: nil, title: "Harry Potter(5-8)">]> 

  Book Load (0.3ms)  SELECT "books"."author", "books"."id" FROM "books" LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Book id: 1, author: "Ann Hood">, #<Book id: 2, author: "J.K Rowling">, #<Book id: 3, author: "Robert Kiyonski">, #<Book id: 7, author: "J.K Rowling">, #<Book id: 8, author: "Ekta Kapoor">, #<Book id: 9, author: "George Martin">, #<Book id: 6, author: "J.K Rowling">]> 


2.7.0 :052 > Book.find(2).users.order(:name).reorder(:id)
  Book Load (0.4ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]
  User Load (0.4ms)  SELECT "users".* FROM "users" INNER JOIN "purchase_books" ON "users"."id" = "purchase_books"."user_id" WHERE "purchase_books"."book_id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["book_id", 2], ["LIMIT", 11]]
 => #<ActiveRecord::AssociationRelation [#<User id: 1, name: "Robert Pattinson", contact: "9899198003", email: "rob@gmail.com", created_at: "2020-02-10 09:19:15", updated_at: "2020-02-10 09:19:15">, #<User id: 2, name: "Denial Redcliffe", contact: "9899198002", email: "Den@gmail.com", created_at: "2020-02-10 10:24:11", updated_at: "2020-02-10 10:24:11">]> 


2.7.0 :062 > PurchaseBook.select(:book_id).distinct

2.7.0 :068 > ap PurchaseBook.order(:book_id).reverse_order

2.7.0 :103 > Book.where(author: 'J.K Rowling').where(id: 6)
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."author" = $1 AND "books"."id" = $2 LIMIT $3  [["author", "J.K Rowling"], ["id", 6], ["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Book id: 6, title: "Harry Potter(5-8)", author: "J.K Rowling", published_date: "2018-04-22", category: "Adventure", isbn: "111455y", price: 0.1e4, created_at: "2020-02-10 09:32:01", updated_at: "2020-02-12 05:17:29">]> 


#Select all Users nd prodects they have purchased

2.7.0 :180 > Book.joins(:purchase_books).joins(:users).select(:title,:id,:name).order(:id).distinct
  Book Load (0.8ms)  SELECT DISTINCT "books"."title", "books"."id", "name" FROM "books" INNER JOIN "purchase_books" ON "purchase_books"."book_id" = "books"."id" INNER JOIN "purchase_books" "purchase_books_books_join" ON "purchase_books_books_join"."book_id" = "books"."id" INNER JOIN "users" ON "users"."id" = "purchase_books_books_join"."user_id" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Book id: 1, title: "The Red Thread">, #<Book id: 1, title: "The Red Thread">, #<Book id: 1, title: "The Red Thread">, #<Book id: 2, title: "Harry Potter(1-4)">, #<Book id: 2, title: "Harry Potter(1-4)">, #<Book id: 6, title: "Harry Potter(5-8)">, #<Book id: 7, title: "Dark Moon">]>


2.7.0 :176 > User.select(:name).joins(:purchases).distinct
  User Load (0.5ms)  SELECT DISTINCT "users"."name" FROM "users" INNER JOIN "purchases" ON "purchases"."user_id" = "users"."id" LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<User id: nil, name: "Sumit Goyal">, #<User id: nil, name: "Robert Pattinson">, #<User id: nil, name: "Denial Redcliffe">, #<User id: nil, name: "Sunidhi Chauhan">]> 


2.7.0 :181 > PurchaseBook.group(:book_id).count
   (0.4ms)  SELECT COUNT(*) AS count_all, "purchase_books"."book_id" AS purchase_books_book_id FROM "purchase_books" GROUP BY "purchase_books"."book_id"
 => {2=>2, 7=>1, 6=>1, 1=>3} 

2.7.0 :201 > Book.joins(:purchase_books)
 
2.7.0 :246 > ap Book.joins(users: :reviews).select(:title,:rating).where('rating < 4.6')
    [0] #<Book:0x000055fe939ce400> {
            "id" => nil,
         "title" => "Harry Potter(1-4)",
        "rating" => 4.4
    },
    [1] #<Book:0x000055fe939ce338> {
            "id" => nil,
         "title" => "The Red Thread",
        "rating" => 4.4

---------------------------------------------------------------------VALIDATIONS-----------------------------------------------------------------------------------------
class Book < ApplicationRecord
  validates :title, presence: true

2.7.0 :003 > ap Book.new(title: '').valid?
false
 => nil 
2.7.0 :004 > ap Book.new(title: 'Red Blood').valid?
true
 => nil 


7.0 :015 > b=Book.new
2.7.0 :017 > b.errors.messages
 => {} 
2.7.0 :018 > b.valid?
 => false 
2.7.0 :019 > b.errors.messages
 => {:title=>["can't be blank"]} 
2.7.0 :021 > x=Book.create
2.7.0 :022 > x.errors.messages
2.7.0 :023 > x.save
 => false 
2.7.0 :024 > x.save!
Traceback (most recent call last):
        1: from (irb):24
ActiveRecord::RecordInvalid (Validation failed: Title can't be blank)

2.7.0 :033 > b.save(validate: false)

2.7.0 :038 > Book.create.errors[:title].any?
 => true 
2.7.0 :039 > Book.create!.errors[:title].any?
Traceback (most recent call last):
        1: from (irb):39
ActiveRecord::RecordInvalid (Validation failed: Title can't be blank)
2.7.0 :041 > x=Book.new
2.7.0 :044 > x.valid?
 => false 
2.7.0 :045 > x.errors.details[:title]
 => [{:error=>:blank}] 
---------> validates :author, format: { with: /\A[a-zA-Z]+\z/, message: "only allows letters" }

2.7.0 :003 > Book.create.errors[:title].any?
 => true 
2.7.0 :004 > Book.create.errors[:author].any?
 => true 
2.7.0 :005 > Book.create(author: '123')
 => #<Book id: nil, title: nil, author: "123", published_date: nil, category: nil, isbn: nil, price: nil, created_at: nil, updated_at: nil> 
2.7.0 :006 > Book.create(author: '123').valid?
 => false 
2.7.0 :007 > Book.create(author: '123',title: 's').valid?
 => false 

2.7.0 :011 > x.errors.details
 => {:author=>[{:error=>:invalid, :value=>"123"}]} 

  validates :title, presence: true
  validates :author, format: { with: /\A[a-zA-Z]+\z/, message: "only allows letters" }
  validates :category, exclusion: { in: %w(Adventure Romance Fantasy Inspiration),
  message: "%{value} is not a valid " }
  validates :title, length: {maximum: 20}
  validates :price, numericality: {only_integer: true}

---->validates :email, uniqueness: true

2.7.0 :006 > Book.create(title: 'd',category: 'fun').valid?
 => false 
2.7.0 :007 > x=Book.create(title: 'd',category: 'fun')
2.7.0 :008 > x.errors.details
 => {:author=>[{:error=>:invalid, :value=>nil}], :category=>[{:error=>:inclusion, :value=>"fun"}]} 
2.7.0 :002 > x=Book.create(title: 'd',category: 'Adventure')
2.7.0 :003 > x.valid?
 => false 
2.7.0 :004 > x.errors.details
 => {:author=>[{:error=>:invalid, :value=>nil}], :category=>[{:error=>:exclusion, :value=>"Adventure"}]} 

2.7.0 :003 > x=Book.create(title: 'The Great Great great Empire',category: 'fun',price: 400.56)
2.7.0 :004 > x.errors.details
 => {:author=>[{:error=>:invalid, :value=>nil}], :title=>[{:error=>:too_long, :count=>20}], :price=>[{:error=>:not_an_integer, :value=>400.56}]} 

2.7.0 :012 > x.valid?
  User Exists? (0.9ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "rob@gmail.com"], ["LIMIT", 1]]
 => false 
2.7.0 :013 > x.errors.details
 => {:email=>[{:error=>:taken, :value=>"rob@gmail.com"}]} 


2.7.0 :002 > Review.create(rating: 4,user_id: 4,book_id: 7).errors
   (0.5ms)  BEGIN
  Book Load (0.7ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 7], ["LIMIT", 1]]
  User Load (0.7ms)  SELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 4], ["LIMIT", 1]]
  Review Exists? (0.8ms)  SELECT 1 AS one FROM "reviews" WHERE "reviews"."user_id" = $1 AND "reviews"."book_id" = $2 LIMIT $3  [["user_id", 4], ["book_id", 7], ["LIMIT", 1]]
   (0.6ms)  ROLLBACK
 => #<ActiveModel::Errors:0x000055bc3e723580 @base=#<Review id: nil, rating: 0.4e1, created_at: nil, updated_at: nil, user_id: 4, book_id: 7>, @messages={:user_id=>["has already been taken"]}, @details={:user_id=>[{:error=>:taken, :value=>4}]}> 

2.7.0 :003 > Review.create(rating: 4,user_id: 4,book_id: 1).errors
   (0.2ms)  BEGIN
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
  User Load (0.2ms)  SELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 4], ["LIMIT", 1]]
  Review Exists? (0.2ms)  SELECT 1 AS one FROM "reviews" WHERE "reviews"."user_id" = $1 AND "reviews"."book_id" = $2 LIMIT $3  [["user_id", 4], ["book_id", 1], ["LIMIT", 1]]
/home/beryl/.rvm/gems/ruby-2.7.0/gems/activerecord-6.0.2.1/lib/active_record/persistence.rb:470: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/beryl/.rvm/gems/ruby-2.7.0/gems/activerecord-6.0.2.1/lib/active_record/timestamp.rb:127: warning: The called method `create_or_update' is defined here
  Review Create (0.6ms)  INSERT INTO "reviews" ("rating", "created_at", "updated_at", "user_id", "book_id") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["rating", "4.0"], ["created_at", "2020-02-17 06:17:24.811726"], ["updated_at", "2020-02-17 06:17:24.811726"], ["user_id", 4], ["book_id", 1]]
   (9.4ms)  COMMIT
 => #<ActiveModel::Errors:0x000055bc3d0ab2f8 @base=#<Review id: 12, rating: 0.4e1, created_at: "2020-02-17 06:17:24", updated_at: "2020-02-17 06:17:24", user_id: 4, book_id: 1>, @messages={}, @details={}> 


---------------------------------------------------------Polymorphic Associations----------------------------------------------------------------------------------------

--->t.references :rate, polymorphic: true

class Book < ApplicationRecord
    belongs_to :writer
    has_many :ratings, as: :rate 

class Writer < ApplicationRecord
     has_many :books
     has_many :ratings, as: :rate
end

class Rating < ApplicationRecord
  belongs_to :rate, polymorphic: true
end



2.7.0 :002 > x=Rating.create(star: '4',rate_id: 1,rate_type:'Writer')
 

2.7.0 :004 > Rating.find(1).rate_type
  Rating Load (0.3ms)  SELECT "ratings".* FROM "ratings" WHERE "ratings"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
 => "Writer"

# Query Interface--------------------------------------------------------------------------------

2.7.0 :016 > ap Book.where(title: 'The Red Thread').or(Book.where(id: [1,2,3]))

2.7.0 :036 > ap Book.where(created_at: (Time.now.midnight - 5.day)..Time.now)

2.7.0 :038 > ap Book.where.not(title: 'The Red Thread')

-----------------------------------------------------------Find_each-----------------------------------------------------------------------------------------------------

2.7.0 :074 > User.find(2).purchases.find_each do |x|
2.7.0 :075 >   ap  x.ammount
2.7.0 :076 > end
  User Load (0.7ms)  SELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]
  Purchase Load (0.8ms)  SELECT "purchases".* FROM "purchases" WHERE "purchases"."user_id" = $1 ORDER BY "purchases"."id" ASC LIMIT $2  [["user_id", 2], ["LIMIT", 1000]]
2000.0
300.0


2.7.0 :077 > User.find_each do |x|
2.7.0 :078 >   ap  x.name
2.7.0 :079 > end
  User Load (0.4ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT $1  [["LIMIT", 1000]]
"Robert Pattinson"
"Denial Redcliffe"
"Sunidhi Chauhan"
"Sumit Goyal"
"Naveen"
"Amit"


2.7.0 :083 > User.find_each(start:2, finish:4) do |x|
2.7.0 :084 >   ap  x.name
2.7.0 :085 > end

"Denial Redcliffe"
"Sunidhi Chauhan"
"Sumit Goyal"
 
 
2.7.0 :086 > User.find_each(batch_size:3) do |x|
2.7.0 :087 >   ap  x.name
2.7.0 :088 > end

"Robert Pattinson"
"Denial Redcliffe"
"Sunidhi Chauhan"
 
 User Load (0.3ms)  SELECT "users".* FROM "users" WHERE "users"."id" > $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 3], ["LIMIT", 3]]

"Sumit Goyal"
"Naveen"
"Amit"

-------------------------------------------------------------------Joins-------------------------------------------------------------------------------------------------

2.7.0 :104 > ap User.joins(:purchase_books, :reviews).distinct

    [0] #<User:0x00007fa9b8718f18> {
                :id => 1,
              :name => "Robert Pattinson",
           :contact => "9899198003",
             :email => "rob@gmail.com",
        :created_at => Mon, 10 Feb 2020 09:19:15 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 09:19:15 UTC +00:00
    },
    [1] #<User:0x00007fa9b8718db0> {
                :id => 2,
              :name => "Denial Redcliffe",
           :contact => "9899198002",
             :email => "Den@gmail.com",
        :created_at => Mon, 10 Feb 2020 10:24:11 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:24:11 UTC +00:00
    },
    [2] #<User:0x00007fa9b8718b80> {
                :id => 4,
              :name => "Sumit Goyal",
           :contact => "7689198002",
             :email => "sum@gmail.com",
        :created_at => Tue, 11 Feb 2020 05:51:33 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 05:51:33 UTC +00:00


2.7.0 :105 > ap User.joins(:purchase_books).distinct


    [0] #<User:0x00007fa9b8533c98> {
                :id => 1,
              :name => "Robert Pattinson",
           :contact => "9899198003",
             :email => "rob@gmail.com",
        :created_at => Mon, 10 Feb 2020 09:19:15 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 09:19:15 UTC +00:00
    },
    [1] #<User:0x00007fa9b8533ab8> {
                :id => 2,
              :name => "Denial Redcliffe",
           :contact => "9899198002",
             :email => "Den@gmail.com",
        :created_at => Mon, 10 Feb 2020 10:24:11 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:24:11 UTC +00:00
    },
    [2] #<User:0x00007fa9b8533608> {
                :id => 3,
              :name => "Sunidhi Chauhan",
           :contact => "5599198002",
             :email => "sun@gmail.com",
        :created_at => Tue, 11 Feb 2020 05:51:06 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 05:51:06 UTC +00:00
    },
    [3] #<User:0x00007fa9b8533518> {
                :id => 4,
              :name => "Sumit Goyal",
           :contact => "7689198002",
             :email => "sum@gmail.com",
        :created_at => Tue, 11 Feb 2020 05:51:33 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 05:51:33 UTC +00:00

2.7.0 :127 > Book.joins(:users).where(users: {id: 2})
  Book Load (0.5ms)  SELECT "books".* FROM "books" INNER JOIN "purchase_books" ON "purchase_books"."book_id" = "books"."id" INNER JOIN "users" ON "users"."id" = "purchase_books"."user_id" WHERE "users"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Book id: 2, title: "Harry Potter(1-4)", author: "J.K Rowling", published_date: "2019-02-22", category: "Fantasy", isbn: "123456y", price: 0.1e4, created_at: "2020-02-10 06:13:54", updated_at: "2020-02-10 06:13:54">, #<Book id: 6, title: "Harry Potter(5-8)", author: "J.K Rowling", published_date: "2018-04-22", category: "Adventure", isbn: "111455y", price: 0.1e4, created_at: "2020-02-10 09:32:01", updated_at: "2020-02-12 05:17:29">, #<Book id: 1, title: "The Red Thread", author: "Ann Hood", published_date: "2018-02-22", category: "Romance", isbn: "123456x", price: 0.3e3, created_at: "2020-02-10 06:11:10", updated_at: "2020-02-10 06:11:10">]> 


.7.0 :182 > ap Book.joins(:users).group(:title).count(:title)
   (0.7ms)  SELECT COUNT("books"."title") AS count_title, "books"."title" AS books_title FROM "books" INNER JOIN "purchase_books" ON "purchase_books"."book_id" = "books"."id" INNER JOIN "users" ON "users"."id" = "purchase_books"."user_id" GROUP BY "books"."title"

            "Dark Moon" => 1,
    "Harry Potter(1-4)" => 2,
    "Harry Potter(5-8)" => 1,
       "The Red Thread" => 3

2.7.0 :207 > ap User.joins(:books).select(:title,:name).order(:name)

    [0] #<User:0x0000556070c8d0b8> {
           "id" => nil,
         "name" => "Denial Redcliffe",
        "title" => "Harry Potter(1-4)"
    },
    [1] #<User:0x0000556070c8cff0> {
           "id" => nil,
         "name" => "Denial Redcliffe",
        "title" => "The Red Thread"
    },
    [2] #<User:0x0000556070c8cf28> {
           "id" => nil,
         "name" => "Denial Redcliffe",
        "title" => "Harry Potter(5-8)"
    },
    [3] #<User:0x0000556070c8ce60> {
           "id" => nil,
         "name" => "Robert Pattinson",
        "title" => "The Red Thread"
    },
    [4] #<User:0x0000556070c8cd98> {
           "id" => nil,
         "name" => "Robert Pattinson",
        "title" => "Harry Potter(1-4)"
    },
    [5] #<User:0x0000556070c8ccd0> {
           "id" => nil,
         "name" => "Sumit Goyal",
        "title" => "Dark Moon"
    },
    [6] #<User:0x0000556070c8cc08> {
           "id" => nil,
         "name" => "Sunidhi Chauhan",
        "title" => "The Red Thread"
    }
]
 => nil 


#Understanding Method Chaining

2.7.0 :244 > ap Book.select('books.title, users.name').joins(:users).where('books.title' =>'The Red Thread')

    [0] #<Book:0x000055606ff2d7d8> {
           "id" => nil,
        "title" => "The Red Thread",
         "name" => "Denial Redcliffe"
    },
    [1] #<Book:0x000055606ff2d558> {
           "id" => nil,
        "title" => "The Red Thread",
         "name" => "Sunidhi Chauhan"
    },
    [2] #<Book:0x000055606ff2d2d8> {
           "id" => nil,
        "title" => "The Red Thread",
         "name" => "Robert Pattinson"
    }
]



------------------------------------------------------include----------------------------------------------------------------------------------------------------------


2.7.0 :123 > User.includes(:reviews)
 
 User Load (0.4ms)  SELECT "users".* FROM "users" LIMIT $1  [["LIMIT", 11]]
  Review Load (0.3ms)  SELECT "reviews".* FROM "reviews" WHERE "reviews"."user_id" IN ($1, $2, $3, $4, $5, $6)  [["user_id", 1], ["user_id", 2], ["user_id", 3], ["user_id", 4], ["user_id", 5], ["user_id", 6]]

 => #<ActiveRecord::Relation [#<User id: 1, name: "Robert Pattinson", contact: "9899198003", email: "rob@gmail.com", created_at: "2020-02-10 09:19:15", updated_at: "2020-02-10 09:19:15">, #<User id: 2, name: "Denial Redcliffe", contact: "9899198002", email: "Den@gmail.com", created_at: "2020-02-10 10:24:11", updated_at: "2020-02-10 10:24:11">, #<User id: 3, name: "Sunidhi Chauhan", contact: "5599198002", email: "sun@gmail.com", created_at: "2020-02-11 05:51:06", updated_at: "2020-02-11 05:51:06">, #<User id: 4, name: "Sumit Goyal", contact: "7689198002", email: "sum@gmail.com", created_at: "2020-02-11 05:51:33", updated_at: "2020-02-11 05:51:33">, #<User id: 5, name: "Naveen", contact: "7689198112", email: "Nav@gmail.com", created_at: "2020-02-11 05:51:59", updated_at: "2020-02-11 05:51:59">, #<User id: 6, name: "Amit", contact: "7689123112", email: "Amit@gmail.com", created_at: "2020-02-11 05:52:23", updated_at: "2020-02-11 05:52:23">]> 

---------------------------------------------------------Explain---------------------------------------------------------------------------------------------------------

2.7.0 :124 > Book.where(id: 1).joins(:reviews).explain
 
 Book Load (0.3ms)  SELECT "books".* FROM "books" INNER JOIN "reviews" ON "reviews"."book_id" = "books"."id" WHERE "books"."id" = $1  [["id", 1]]
 => EXPLAIN for: SELECT "books".* FROM "books" INNER JOIN "reviews" ON "reviews"."book_id" = "books"."id" WHERE "books"."id" = $1 [["id", 1]]
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Nested Loop  (cost=4.33..20.85 rows=4 width=188)
   ->  Index Scan using books_pkey on books  (cost=0.15..8.17 rows=1 width=188)
         Index Cond: (id = '1'::bigint)
   ->  Bitmap Heap Scan on reviews  (cost=4.18..12.64 rows=4 width=8)
         Recheck Cond: (book_id = '1'::bigint)
         ->  Bitmap Index Scan on index_reviews_on_book_id  (cost=0.00..4.18 rows=4 width=0)
               Index Cond: (book_id = '1'::bigint)
(7 rows)

--------------------------------------------------------Dynamic Finder--------------------------------------------------------------------------------------------------

2.7.0 :208 > Book.find_by_title('The Red Thread')
  Book Load (0.4ms)  SELECT "books".* FROM "books" WHERE "books"."title" = $1 LIMIT $2  [["title", "The Red Thread"], ["LIMIT", 1]]
 => #<Book id: 1, title: "The Red Thread", author: "Ann Hood", published_date: "2018-02-22", category: "Romance", isbn: "123456x", price: 0.3e3, created_at: "2020-02-10 06:11:10", updated_at: "2020-02-10 06:11:10"> 


----------------------------------------------------pluck---------------------------------------------------------------------------------------------------------------

2.7.0 :214 > ap Book.where(title: 'The Red Thread').pluck(:price)
   (0.3ms)  SELECT "books"."price" FROM "books" WHERE "books"."title" = $1  [["title", "The Red Thread"]]

[
    [0] 300.0
]
 => nil 

---------------------------------------------------------------------enum------------------------------------------------------------------------------------------------

enum status: {draft: 0,published: 1}

->Book.create!(title:'hh')
->Book.last.published!

2.7.0 :195 > ap Book.second.published!
2.7.0 :196 > ap Book.second.published?


  enum category: [:available, :unavailable]

2.7.0 :046 > Book.new(category: 'available')
 => #<Book id: nil, title: nil, author: nil, published_date: nil, category: "available", isbn: nil, price: nil, created_at: nil, updated_at: nil> 
2.7.0 :047 > Book.new(category: 'available').available?
 => true 
2.7.0 :048 > Book.new(category: 'available').unavailable?
 => false 



------------------------------------------------------------------------find or build new object-------------------------------------------------------------------------

2.7.0 :253 > Book.find_or_create_by(title:'sumo')
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."title" = $1 LIMIT $2  [["title", "sumo"], ["LIMIT", 1]]
 => #<Book id: nil, title: "sumo", author: nil, published_date: nil, category: nil, isbn: nil, price: nil, created_at: nil, updated_at: nil> 

2.7.0 :254 > Book.find_or_create_by(title:'The Red Thread')
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."title" = $1 LIMIT $2  [["title", "The Red Thread"], ["LIMIT", 1]]
 => #<Book id: 1, title: "The Red Thread", author: "Ann Hood", published_date: "2018-02-22", category: "Romance", isbn: "123456x", price: 0.3e3, created_at: "2020-02-10 06:11:10", updated_at: "2020-02-10 06:11:10"> 


---------------------------------------------------------Association Queries---------------------------------------------------------------------------------------------
class User < ApplicationRecord
   
    has_many :reviews, dependent: :destroy


2.7.0 :016 > User.last.purchases.create(date: "2020-01-01", ammount: 1000)
 
 => #<Purchase id: 6, date: "2020-01-01", ammount: 0.1e4, created_at: "2020-02-15 05:06:52", updated_at: "2020-02-15 05:06:52", user_id: 5> 

2.7.0 :017 > User.last.purchases
 
 => #<ActiveRecord::Associations::CollectionProxy [#<Purchase id: 6, date: "2020-01-01", ammount: 0.1e4, created_at: "2020-02-15 05:06:52", updated_at: "2020-02-15 05:06:52", user_id: 5>]> 

2.7.0 :004 > Purchase.last.purchase_books.create(book_id: 9,user_id: 5)

 => #<PurchaseBook created_at: "2020-02-15 05:50:29", updated_at: "2020-02-15 05:50:29", purchase_id: 6, book_id: 9, user_id: 5, id: 8> 

2.7.0 :005 > ap Book.joins(:users).distinct.pluck(:title)
   (0.6ms)  SELECT DISTINCT "books"."title" FROM "books" INNER JOIN "purchase_books" ON "purchase_books"."book_id" = "books"."id" INNER JOIN "purchases" ON "purchases"."id" = "purchase_books"."purchase_id" INNER JOIN "users" ON "users"."id" = "purchases"."user_id"

[
    [0] "Dark Moon",
    [1] "Game Of Thrones",
    [2] "Harry Potter(1-4)",
    [3] "Harry Potter(5-8)",
    [4] "The Red Thread"
]

2.7.0 :006 > User.all.where("name ilike?",'s%')
  User Load (0.6ms)  SELECT "users".* FROM "users" WHERE (name ilike's%') LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<User id: 3, name: "Sunidhi Chauhan", contact: "5599198002", email: "sun@gmail.com", created_at: "2020-02-11 05:51:06", updated_at: "2020-02-11 05:51:06">, #<User id: 4, name: "Sumit Goyal", contact: "7689198002", email: "sum@gmail.com", created_at: "2020-02-11 05:51:33", updated_at: "2020-02-11 05:51:33">]> 

2.7.0 :065 > ap Book.joins(:purchase_books).group(:title).count
{
            "Dark Moon" => 1,
      "Game Of Thrones" => 1,
    "Harry Potter(1-4)" => 2,
    "Harry Potter(5-8)" => 1,
       "The Red Thread" => 4
}
 => nil 

2.7.0 :033 > User.first.purchases.create(date: "2020-02-02", ammount: 500).purchase_books.create(book_id: 8)
  User Load (0.3ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT $1  [["LIMIT", 1]]
   (0.2ms)  BEGIN
  Purchase Create (24.7ms)  INSERT INTO "purchases" ("date", "ammount", "created_at", "updated_at", "user_id") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["date", "2020-02-02"], ["ammount", "500.0"], ["created_at", "2020-02-17 05:31:20.062917"], ["updated_at", "2020-02-17 05:31:20.062917"], ["user_id", 1]]
   (23.7ms)  COMMIT
   (0.4ms)  BEGIN
  Book Load (0.6ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 8], ["LIMIT", 1]]
  PurchaseBook Create (16.0ms)  INSERT INTO "purchase_books" ("created_at", "updated_at", "purchase_id", "book_id") VALUES ($1, $2, $3, $4) RETURNING "id"  [["created_at", "2020-02-17 05:31:20.117733"], ["updated_at", "2020-02-17 05:31:20.117733"], ["purchase_id", 8], ["book_id", 8]]
   (27.2ms)  COMMIT
 => #<PurchaseBook created_at: "2020-02-17 05:31:20", updated_at: "2020-02-17 05:31:20", id: 10, purchase_id: 8, book_id: 8> 


-------------------------------------------------------------Setting up associations-------------------------------------------------------------------------------------

class User < ApplicationRecord
    validates :email, uniqueness: true
    has_many :reviews, dependent: :destroy
    has_many :purchases
    has_many :purchase_books, through: :purchases
    has_many :books, through: :purchases
end


class Book < ApplicationRecord
  validates :title, presence: true
  validates :author, format: { with: /\A[a-zA-Z]+\z/, message: "only allows letters" }
  #validates :category, exclusion: { in: %w(Adventure Romance Fantasy Inspiration),
  #message: "%{value} is not a valid " }
  #validates :title, length: {maximum: 20}
  validates :price, numericality: {only_integer: true}
  has_many :reviews, dependent: :destroy
  has_many :purchase_books
  has_many :purchases, through: :purchase_books
  has_many :users, through: :purchases
  
end

class PurchaseBook < ApplicationRecord
  belongs_to :book
  belongs_to :purchase
  has_many :users, through: :purchases
end

class Purchase < ApplicationRecord
  belongs_to :user
  has_many :purchase_books
  has_many :books, through: :purchase_books
end

class Review < ApplicationRecord
  belongs_to :book
  belongs_to :user
end


---------------------------------Read Only Association---------------->>>>>>>>

2.7.0 :086 > User.last.books.create(title: "2 Moons", author: "Ann Hood", published_date: "2019-02-22", category: "Romance", isbn: "423436x", price: 500)
  User Load (0.4ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
Traceback (most recent call last):
        1: from (irb):86
ActiveRecord::HasManyThroughNestedAssociationsAreReadonly (Cannot modify association 'User#books' because it goes through more than one other association.)


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Practice validations:

validates :title, presence: true
  validates :author, format: { with: /\A[a-zA-Z]+\z/, message: "only allows letters" }
  validates :category, inclusion: { in: %w(Adventure Romance Fantasy Inspiration),
  message: "%{value} is not a valid " }
  validates :title, length: {maximum: 10, too_long: "%{count} character is max allow"}
  validates :price, numericality: {only_integer: true}
  validates :price, presence: true,numericality: {greater_than_or_equal_to: 300  "must be greter or equal to 300"}
      #validates :price,presence: true, if: -> { price > 300 }
     #validates :price,presence: true, unless: -> { price.blank?}

  def isvalid
    if self.price == 300
      return true
    else
      return false
    end
  end
end

2.7.0 :011 > x.errors.details
 => {:title=>[{:error=>:blank}], :author=>[{:error=>:invalid, :value=>"12"}], :category=>[{:error=>:inclusion, :value=>"q"}], :price=>[{:error=>:not_an_integer, :value=>"2.3"}, {:error=>:greater_than_or_equal_to, :value=>0.23e1, :count=>300}]} 

Custom Validators,metods:----------------------------------------------------------------------------------------------------------------------------------------------

class EmailVal < ActiveModel::Validator
  def validate(record)
      unless record.email.match?(/^\w+\.?\w+@[a-z]+\.[a-z]+/)
         record.errors[:email] << 'Please enter Valid Email!'
      end
  end
end
class User < ApplicationRecord
     
 
      validates_with EmailVal
      validate :ValContact

     def ValContact
       if contact.length!=10
       errors.add(:contact, 'Please enter right phone_no.')
       end
     end
end


2.7.0 :031 > User.create(name: 'x',contact: '123456780',email: 'sumgmail.com').errors

 => #<ActiveModel::Errors:0x0000556e8b837a30 @base=#<User id: nil, name: "x", contact: "123456780", email: "sumgmail.com", created_at: nil, updated_at: nil>, @messages={:email=>["Please enter Valid Email!"], :contact=>["Please enter right phone_no."]}, @details={:contact=>[{:error=>"Please enter right phone_no."}]}> 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Association Extentions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
module FindRecentPurchase
  def find_recent
    where("created_at > ?", 5.days.ago)
  end
end

class User < ApplicationRecord
    has_many :purchases, -> { extending FindRecentPurchase }
end

class Purchase < ApplicationRecord
  belongs_to :user
  has_many :purchase_books, -> { extending FindRecentPurchase }
end

2.7.0 :072 > User.first.purchases.find_recent
  User Load (0.4ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT $1  [["LIMIT", 1]]
  Purchase Load (0.4ms)  SELECT "purchases".* FROM "purchases" WHERE "purchases"."user_id" = $1 AND (created_at > '2020-02-13 10:59:33.252028') LIMIT $2  [["user_id", 1], ["LIMIT", 11]]
 => #<ActiveRecord::AssociationRelation [#<Purchase id: 8, date: "2020-02-02", ammount: 0.5e3, created_at: "2020-02-17 05:31:20", updated_at: "2020-02-17 05:31:20", user_id: 1>, #<Purchase id: 9, date: "2020-02-02", ammount: 0.3e3, created_at: "2020-02-17 05:31:44", updated_at: "2020-02-17 05:49:09", user_id: 1>]> 

 => nil 
2.7.0 :097 > User.last.purchases.last.purchase_books.find_recent
  User Load (0.4ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
  Purchase Load (0.3ms)  SELECT "purchases".* FROM "purchases" WHERE "purchases"."user_id" = $1 ORDER BY "purchases"."id" DESC LIMIT $2  [["user_id", 5], ["LIMIT", 1]]
  PurchaseBook Load (0.3ms)  SELECT "purchase_books".* FROM "purchase_books" WHERE "purchase_books"."purchase_id" = $1 AND (created_at > '2020-02-13 11:10:17.285896') LIMIT $2  [["purchase_id", 7], ["LIMIT", 11]]
 => #<ActiveRecord::AssociationRelation [#<PurchaseBook created_at: "2020-02-15 07:21:41", updated_at: "2020-02-17 05:26:25", id: 9, purchase_id: 7, book_id: 1>]> 
________________________________________________________________________________________________________________________________________________________________________

-----------------------------------------------------------SCOPE---------------------------------------------------------------------------------
  scope :Cheap, -> { where ('price < 800') }
  scope :Costly, -> { where ('price >= 800') }
  scope :top, -> { where ("rating > 4.5") }
  scope :created_before, ->(time) { where("created_at < ?", time) }
  scope :created_before, ->(time) { where("created_at < ?", time) if time.present? }
  default_scope { where ('rating > 3')}
end
2.7.0 :017 > Book.Cheap
  Book Load (0.5ms)  SELECT "books".* FROM "books" WHERE (price < 800) LIMIT $1  [["LIMIT", 11]]
 
2.7.0 :018 > Book.Costly
  Book Load (1.2ms)  SELECT "books".* FROM "books" WHERE (price >= 800) LIMIT $1  [["LIMIT", 11]]


2.7.0 :028 > ap PurchaseBook.all.created_before(Time.now - 5.days)
  PurchaseBook Load (0.4ms)  SELECT "purchase_books".* FROM "purchase_books" WHERE (created_at < '2020-02-13 12:07:11.688380') LIMIT $1  [["LIMIT", 11]]
 
2.7.0 :037 > Book.Cheap.Costly
  Book Load (0.5ms)  SELECT "books".* FROM "books" WHERE (price < 800) AND (price >= 800) LIMIT $1  [["LIMIT", 11]]

2.7.0 :039 > Review.all
  Review Load (0.4ms)  SELECT "reviews".* FROM "reviews" WHERE (rating > 3) LIMIT $1  [["LIMIT", 11]]
2.7.0 :019 > Review.top
  Review Load (0.4ms)  SELECT "reviews".* FROM "reviews" WHERE (rating > 4.5) LIMIT $1  [["LIMIT", 11]]
 
